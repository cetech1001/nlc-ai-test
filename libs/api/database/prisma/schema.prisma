generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Users Domain
enum AuthProviders {
  google
}

enum UserType {
  admin
  coach
  client
}

enum AdminRole {
  admin
}

enum ClientCoachStatus {
  active
  inactive
  pending
}

enum ClientCoachRole {
  client
  lead
  prospect
}

model LoginActivity {
  id            String   @id @default(uuid()) @db.Uuid
  userID        String   @db.Uuid
  userType      String   @db.VarChar(50)
  loginAt       DateTime @default(now()) @db.Timestamptz(6)
  ipAddress     String?  @db.VarChar(45)
  userAgent     String?  @db.VarChar(500)
  deviceType    String?  @db.VarChar(50)
  platform      String?  @db.VarChar(50)
  browser       String?  @db.VarChar(50)
  loginMethod   String?  @db.VarChar(50)
  success       Boolean  @default(true)
  failureReason String?  @db.VarChar(255)

  @@index([userID], map: "idx_login_activity_user_id")
  @@index([userID, loginAt], map: "idx_login_activity_user_id_login_at")
  @@index([loginAt], map: "idx_login_activity_login_at")
  @@index([userType], map: "idx_login_activity_user_type")
  @@map("login_activities")
}

model Admin {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique @db.VarChar(255)
  passwordHash String    @db.VarChar(255)
  firstName    String    @db.VarChar(100)
  lastName     String    @db.VarChar(100)
  avatarUrl    String?
  role         AdminRole @default(admin)
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime? @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @db.Timestamptz(6)

  @@map("admins")
}

model Coach {
  id                  String         @id @default(uuid()) @db.Uuid
  email               String         @unique @db.VarChar(255)
  passwordHash        String?        @db.VarChar(255)
  provider            AuthProviders?
  providerID          String?
  firstName           String         @db.VarChar(100)
  lastName            String         @db.VarChar(100)
  businessName        String?        @db.VarChar(255)
  phone               String?        @db.VarChar(20)
  avatarUrl           String?
  bio                 String?
  location            String?        @db.VarChar(100)
  websiteUrl          String?
  timezone            String?        @default("UTC") @db.VarChar(50)
  subscriptionStatus  String?        @default("trial") @db.VarChar(50)
  subscriptionPlan    String?        @db.VarChar(50)
  subscriptionEndsAt  DateTime?      @db.Timestamptz(6)
  stripeCustomerID    String?        @db.VarChar(255)
  isActive            Boolean        @default(true)
  isVerified          Boolean        @default(false)
  isDeleted           Boolean        @default(false)
  deletedAt           DateTime?      @db.Timestamptz(6)
  lastLoginAt         DateTime?      @db.Timestamptz(6)
  marketingOptIn      Boolean        @default(false)
  onboardingCompleted Boolean        @default(false)
  metadata            Json           @default("{}")
  createdAt           DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime       @default(now()) @db.Timestamptz(6)

  chatbotCustomization ChatbotCustomization?

  coachAiAgents      CoachAiAgent[]
  contentPieces      ContentPiece[]
  courses            Course[]
  paymentMethods     PaymentMethod[]
  leads              Lead[]
  knowledgeFiles     CoachKnowledgeFile[]
  agentThreads       AgentThread[]
  agentMessages      AgentMessage[]
  clientCoaches      ClientCoach[]
  clientInvites      ClientInvite[]
  coachFollows       CoachFollow[]
  contentSuggestions ContentSuggestion[]

  @@index([createdAt], map: "idx_coaches_created_at")
  @@index([email], map: "idx_coaches_email")
  @@index([subscriptionStatus], map: "idx_coaches_subscription_status")
  @@map("coaches")
}

model Client {
  id                String         @id @default(uuid()) @db.Uuid
  passwordHash      String?        @db.VarChar(255)
  email             String         @unique @db.VarChar(255)
  provider          AuthProviders?
  providerID        String?
  firstName         String         @db.VarChar(100)
  lastName          String         @db.VarChar(100)
  phone             String?        @db.VarChar(20)
  avatarUrl         String?
  source            String?        @db.VarChar(100)
  tags              String[]
  lastInteractionAt DateTime?      @db.Timestamptz(6)
  totalInteractions Int?           @default(0)
  engagementScore   Decimal?       @default(0.00) @db.Decimal(3, 2)
  stripeCustomerID  String?        @db.VarChar(255)
  location          String?        @db.VarChar(100)
  timezone          String?        @default("UTC") @db.VarChar(50)
  metadata          Json           @default("{}")
  isActive          Boolean        @default(true)
  isVerified        Boolean        @default(false)
  isDeleted         Boolean        @default(false)
  marketingOptIn    Boolean        @default(false)
  deletedAt         DateTime?      @db.Timestamptz(6)
  lastLoginAt       DateTime?      @db.Timestamptz(6)
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @default(now()) @db.Timestamptz(6)

  courseEnrollments CourseEnrollment[]
  clientCoaches     ClientCoach[]
  paymentMethods    PaymentMethod[]

  @@index([email], map: "idx_clients_email")
  @@index([lastInteractionAt], map: "idx_clients_last_interaction")
  @@map("clients")
}

model ChatbotCustomization {
  id        String  @id @default(uuid()) @db.Uuid
  coachID   String  @unique @db.Uuid
  name      String  @db.VarChar(100)
  avatarUrl String? @db.Text
  logoUrl   String? @db.Text

  primaryColor  String @default("#DF69FF") @db.VarChar(7)
  gradientStart String @default("#B339D4") @db.VarChar(7)
  gradientEnd   String @default("#7B21BA") @db.VarChar(7)

  assistantTextColor   String @default("#C5C5C5") @db.VarChar(7)
  assistantBubbleColor String @default("#1A1A1A") @db.VarChar(7)
  userTextColor        String @default("#C5C5C5") @db.VarChar(7)
  userBubbleColor      String @default("rgba(223,105,255,0.08)") @db.VarChar(30)

  backgroundColor String @default("#0A0A0A") @db.VarChar(7)
  glowColor       String @default("#7B21BA") @db.VarChar(7)

  position String  @default("bottom-right") @db.VarChar(20)
  greeting String? @db.Text

  requireUserInfo Boolean @default(false)
  requireName     Boolean @default(false)
  requireEmail    Boolean @default(false)
  requirePhone    Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  coach Coach @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@map("chatbot_customizations")
}

model CoachFollow {
  id String @id @default(uuid()) @db.Uuid

  coachID String @db.Uuid

  followerID   String   @db.Uuid
  followerType UserType

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  coach Coach @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@unique([coachID, followerID, followerType])
  @@index([coachID])
  @@index([followerID, followerType])
  @@map("coach_follows")
}

model CoachAiAgent {
  id        String  @id @default(uuid()) @db.Uuid
  coachID   String  @db.Uuid
  agentID   String  @db.Uuid
  isEnabled Boolean @default(true)

  customConfig Json? @default("{}")

  assistantID      String? @db.VarChar(255)
  vectorStoreID    String? @db.VarChar(255)
  assistantName    String? @db.VarChar(255)
  instructions     String? @db.Text
  model            String? @default("gpt-4o") @db.VarChar(50)
  fineTunedModelID String? @db.VarChar(255)

  totalRequests   Int       @default(0)
  totalTokensUsed BigInt    @default(0)
  lastUsedAt      DateTime? @db.Timestamptz(6)
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @db.Timestamptz(6)

  lastFineTuningAt     DateTime? @db.Timestamptz(6)
  fineTuningEmailCount Int?      @default(0)

  aiAgent AiAgent @relation(fields: [agentID], references: [id], onDelete: Cascade)
  coach   Coach   @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@unique([coachID, agentID])
}

model ClientCoach {
  id         String            @id @default(uuid()) @db.Uuid
  clientID   String            @db.Uuid
  coachID    String            @db.Uuid
  status     ClientCoachStatus @default(active)
  assignedAt DateTime          @default(now()) @db.Timestamptz(6)
  assignedBy String?           @db.Uuid
  notes      String?
  isPrimary  Boolean           @default(false)
  createdAt  DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime          @updatedAt @db.Timestamptz(6)

  client Client @relation(fields: [clientID], references: [id], onDelete: Cascade)
  coach  Coach  @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@unique([clientID, coachID])
  @@index([clientID])
  @@index([coachID])
  @@index([status])
  @@map("client_coaches")
}

model ClientInvite {
  id        String    @id @default(uuid()) @db.Uuid
  coachID   String    @db.Uuid
  email     String    @db.VarChar(255)
  token     String    @unique @db.VarChar(255)
  role      String?   @default("client") @db.VarChar(50)
  message   String?
  expiresAt DateTime  @db.Timestamptz(6)
  usedAt    DateTime? @db.Timestamptz(6)
  usedBy    String?   @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)

  coach Coach @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@index([coachID])
  @@index([email])
  @@index([token])
  @@map("client_invites")
}

model CoachKnowledgeFile {
  id                String              @id @default(uuid()) @db.Uuid
  coachID           String              @db.Uuid
  openaiFileID      String              @db.VarChar(255)
  vectorStoreFileID String?             @db.VarChar(255)
  filename          String              @db.VarChar(500)
  fileSize          Int
  mimeType          String              @db.VarChar(100)
  status            KnowledgeFileStatus @default(uploaded)
  uploadedAt        DateTime            @default(now()) @db.Timestamptz(6)
  indexedAt         DateTime?           @db.Timestamptz(6)
  failedAt          DateTime?           @db.Timestamptz(6)
  errorMessage      String?             @db.Text
  metadata          Json?               @default("{}")
  category          String?             @db.VarChar(50)

  coach Coach @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([coachID])
  @@index([openaiFileID])
  @@index([status])
  @@index([uploadedAt])
  @@map("coach_knowledge_files")
}

// AI Agent Domain
enum AgentType {
  content_creation
  email_response
  lead_followup
  client_retention
  coach_replica
}

enum GeneratedEmailStatus {
  generated
  updated
  scheduled
  sent
  failed
  cancelled
  superseded
}

enum KnowledgeFileStatus {
  uploaded
  indexed
  failed
  deleted
}

enum ReplicaThreadStatus {
  active
  archived
  deleted
}

enum FineTuningJobStatus {
  pending
  preparing_data
  running
  completed
  failed
  cancelled
}

model FineTuningJob {
  id          String @id @default(uuid()) @db.Uuid
  coachID     String @db.Uuid
  assistantID String @db.VarChar(255)

  s3DatasetKey String @db.VarChar(500)
  emailCount   Int

  openaiJobID      String? @db.VarChar(255)
  openaiFileID     String? @db.VarChar(255)
  fineTunedModelID String? @db.VarChar(255)

  status       FineTuningJobStatus @default(pending)
  errorMessage String?             @db.Text

  startedAt   DateTime? @db.Timestamptz(6)
  completedAt DateTime? @db.Timestamptz(6)

  trainedOn DateTime @db.Timestamptz(6)
  dateFrom  DateTime @db.Timestamptz(6)
  dateTo    DateTime @db.Timestamptz(6)

  trainingMetrics Json? @default("{}")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([coachID])
  @@index([status])
  @@index([createdAt])
  @@map("fine_tuning_jobs")
}

model CoachEmailCache {
  id        String @id @default(uuid()) @db.Uuid
  coachID   String @db.Uuid
  threadID  String @db.VarChar(255)
  messageID String @db.VarChar(255)

  s3Key String @db.VarChar(500)

  from    String  @db.VarChar(255)
  to      String  @db.VarChar(255)
  subject String? @db.VarChar(500)

  isFromCoach      Boolean
  isToClientOrLead Boolean

  includedInFineTuning Boolean @default(false)
  fineTuningJobID      String? @db.Uuid

  sentAt    DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@unique([coachID, messageID])
  @@index([coachID, isFromCoach])
  @@index([coachID, includedInFineTuning])
  @@index([threadID])
  @@index([sentAt])
  @@map("coach_email_cache")
}

model AiAgent {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @unique @db.VarChar(100)
  type          AgentType @unique
  description   String?
  isActive      Boolean   @default(true)
  lastUsedAt    DateTime? @db.Timestamptz(6)
  defaultConfig Json?     @default("{}")
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @db.Timestamptz(6)

  coachAiAgents CoachAiAgent[]
  planAiAgents  PlanAiAgent[]

  @@map("ai_agents")
}

model AgentThread {
  id             String    @id @default(uuid()) @db.Uuid
  coachID        String    @db.Uuid
  agentID        String    @db.Uuid
  openaiThreadID String?   @db.VarChar(255)
  title          String?   @db.VarChar(500)
  status         String    @default("active") @db.VarChar(20)
  messageCount   Int       @default(0)
  lastMessageAt  DateTime? @db.Timestamptz(6)
  metadata       Json?     @default("{}")
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @db.Timestamptz(6)

  coach    Coach          @relation(fields: [coachID], references: [id], onDelete: Cascade)
  messages AgentMessage[]

  @@index([coachID, agentID])
}

model AgentMessage {
  id        String   @id @default(uuid()) @db.Uuid
  threadID  String   @db.Uuid
  coachID   String   @db.Uuid
  role      String   @db.VarChar(20)
  content   String   @db.Text
  messageID String?  @db.VarChar(255)
  runID     String?  @db.VarChar(255)
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  thread AgentThread @relation(fields: [threadID], references: [id], onDelete: Cascade)
  coach  Coach       @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@index([threadID])
}

// Community Domain

enum CommunityType {
  coach_client
  coach_to_coach
  course
  private
}

enum CommunityVisibility {
  public
  private
  invite_only
}

enum MemberRole {
  owner
  admin
  moderator
  member
}

enum MemberStatus {
  active
  inactive
  suspended
  pending
}

enum PostType {
  text
  image
  video
  link
  poll
  event
}

enum ReactionType {
  like
  love
  laugh
  angry
  sad
  celebrate
}

enum CommunityPricingType {
  free
  monthly
  annual
  one_time
}

enum ModerationStatus {
  pending
  approved
  removed
  dismissed
}

enum ModerationPriority {
  low
  medium
  high
  critical
}

enum ViolationType {
  spam
  harassment
  inappropriate
  hate_speech
  misinformation
  copyright
}

enum ModerationActionType {
  content_approved
  content_removed
  content_dismissed
  member_warned
  member_suspended
  member_banned
  auto_flagged
  user_reported
}

enum CommunityInviteStatus {
  pending
  accepted
  declined
  expired
}

model Community {
  id          String              @id @default(uuid()) @db.Uuid
  name        String              @db.VarChar(255)
  description String?             @db.Text
  type        CommunityType
  visibility  CommunityVisibility @default(private)
  ownerID     String              @db.Uuid
  ownerType   String              @db.VarChar(20)
  coachID     String?             @db.Uuid
  courseID    String?             @db.Uuid
  avatarUrl   String?
  bannerUrl   String?
  slug        String              @unique @db.VarChar(100)

  pricingType  CommunityPricingType @default(free)
  oneTimePrice Int?
  monthlyPrice Int?
  annualPrice  Int?
  currency     String?              @default("USD") @db.VarChar(3)

  isSystemCreated Boolean @default(false)
  isDeleted       Boolean @default(false)

  settings    Json     @default("{}")
  memberCount Int      @default(0)
  postCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  flaggedContent    FlaggedContent[]
  contentReports    ContentReport[]
  moderationActions ModerationAction[]
  moderationRules   ModerationRule[]
  moderationStats   ModerationStats[]

  members         CommunityMember[]
  posts           Post[]
  invites         CommunityInvite[]
  subscriptions   Subscription[]
  transactions    Transaction[]
  paymentRequests PaymentRequest[]

  @@index([type])
  @@index([pricingType])
  @@index([coachID])
  @@index([courseID])
  @@index([ownerID, ownerType])
  @@index([isSystemCreated])
  @@index([createdAt])
  @@map("communities")
}

model CommunityInvite {
  id          String                @id @default(uuid()) @db.Uuid
  communityID String                @db.Uuid
  inviterID   String                @db.Uuid
  inviterType String                @db.VarChar(20)
  inviteeID   String                @db.Uuid
  inviteeType String                @db.VarChar(20)
  message     String?               @db.Text
  token       String                @unique @db.VarChar(255)
  status      CommunityInviteStatus @default(pending)
  expiresAt   DateTime              @db.Timestamptz(6)
  acceptedAt  DateTime?             @db.Timestamptz(6)
  createdAt   DateTime              @default(now()) @db.Timestamptz(6)

  community Community @relation(fields: [communityID], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([inviteeID, inviteeType])
  @@index([status])
  @@map("community_invites")
}

model CommunityMember {
  id           String       @id @default(uuid()) @db.Uuid
  communityID  String       @db.Uuid
  userID       String       @db.Uuid
  userType     UserType
  role         MemberRole   @default(member)
  status       MemberStatus @default(active)
  joinedAt     DateTime     @default(now()) @db.Timestamptz(6)
  lastActiveAt DateTime?    @db.Timestamptz(6)
  invitedBy    String?      @db.Uuid
  customTitle  String?      @db.VarChar(100)
  permissions  String[]     @default([])

  userName      String  @db.VarChar(255)
  userEmail     String  @db.VarChar(255)
  userAvatarUrl String?

  community Community     @relation(fields: [communityID], references: [id], onDelete: Cascade)
  posts     Post[]
  comments  PostComment[]

  @@unique([communityID, userID, userType])
  @@index([userID, userType])
  @@index([communityID])
  @@index([status])
  @@index([userName])
  @@index([userEmail])
  @@map("community_members")
}

model Post {
  id          String @id @default(uuid()) @db.Uuid
  communityID String @db.Uuid

  communityMemberID String @db.Uuid

  type         PostType @default(text)
  content      String   @db.Text
  mediaUrls    String[] @default([])
  linkUrl      String?
  linkPreview  Json?    @default("{}")
  pollOptions  String[] @default([])
  eventData    Json?    @default("{}")
  isPinned     Boolean  @default(false)
  isEdited     Boolean  @default(false)
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  shareCount   Int      @default(0)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  isDeleted Boolean @default(false)

  community       Community       @relation(fields: [communityID], references: [id], onDelete: Cascade)
  communityMember CommunityMember @relation(fields: [communityMemberID], references: [id], onDelete: Cascade)
  comments        PostComment[]
  reactions       PostReaction[]

  @@index([communityID])
  @@index([communityMemberID])
  @@index([type])
  @@index([createdAt])
  @@index([isPinned])
  @@map("posts")
}

model PostComment {
  id     String @id @default(uuid()) @db.Uuid
  postID String @db.Uuid

  communityMemberID String @db.Uuid

  content         String   @db.Text
  mediaUrls       String[] @default([])
  parentCommentID String?  @db.Uuid
  likeCount       Int      @default(0)
  replyCount      Int      @default(0)
  isEdited        Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  post            Post            @relation(fields: [postID], references: [id], onDelete: Cascade)
  communityMember CommunityMember @relation(fields: [communityMemberID], references: [id], onDelete: Cascade)
  parentComment   PostComment?    @relation("CommentReplies", fields: [parentCommentID], references: [id])
  replies         PostComment[]   @relation("CommentReplies")
  reactions       PostReaction[]

  @@index([postID])
  @@index([communityMemberID])
  @@index([parentCommentID])
  @@index([createdAt])
  @@map("post_comments")
}

model PostReaction {
  id        String  @id @default(uuid()) @db.Uuid
  postID    String? @db.Uuid
  commentID String? @db.Uuid

  userID   String   @db.Uuid
  userType UserType

  type      ReactionType @default(like)
  createdAt DateTime     @default(now()) @db.Timestamptz(6)

  post    Post?        @relation(fields: [postID], references: [id], onDelete: Cascade)
  comment PostComment? @relation(fields: [commentID], references: [id], onDelete: Cascade)

  @@unique([postID, userID, userType])
  @@unique([commentID, userID, userType])
  @@index([userID, userType])
  @@index([type])
  @@map("post_reactions")
}

model FlaggedContent {
  id          String @id @default(uuid()) @db.Uuid
  contentID   String @db.Uuid
  contentType String @db.VarChar(20) // 'post', 'comment', 'message'
  communityID String @db.Uuid

  // Content details (denormalized for performance)
  content    String @db.Text
  authorID   String @db.Uuid
  authorName String @db.VarChar(255)
  authorType String @db.VarChar(20)

  // Moderation details
  status    ModerationStatus   @default(pending)
  priority  ModerationPriority @default(medium)
  flagCount Int                @default(1)
  reasons   ViolationType[]    @default([])

  // AI analysis
  aiScore  Float?  @db.Real // 0.0 - 1.0 confidence score
  aiReason String? @db.Text

  // Resolution details
  reportedAt     DateTime  @default(now()) @db.Timestamptz(6)
  resolvedAt     DateTime? @db.Timestamptz(6)
  resolvedBy     String?   @db.Uuid
  resolvedByType String?   @db.VarChar(20)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  community Community          @relation(fields: [communityID], references: [id], onDelete: Cascade)
  reports   ContentReport[]
  actions   ModerationAction[]

  @@index([communityID])
  @@index([status])
  @@index([priority])
  @@index([contentType])
  @@index([authorID, authorType])
  @@index([reportedAt])
  @@map("flagged_content")
}

model ContentReport {
  id               String @id @default(uuid()) @db.Uuid
  flaggedContentID String @db.Uuid
  communityID      String @db.Uuid

  // Reporter details
  reporterID   String @db.Uuid
  reporterType String @db.VarChar(20)
  reporterName String @db.VarChar(255)

  // Report details
  reason      ViolationType
  details     String?       @db.Text
  isAnonymous Boolean       @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  flaggedContent FlaggedContent @relation(fields: [flaggedContentID], references: [id], onDelete: Cascade)
  community      Community      @relation(fields: [communityID], references: [id], onDelete: Cascade)

  @@index([flaggedContentID])
  @@index([communityID])
  @@index([reporterID, reporterType])
  @@index([reason])
  @@map("content_reports")
}

model ModerationAction {
  id               String  @id @default(uuid()) @db.Uuid
  communityID      String  @db.Uuid
  flaggedContentID String? @db.Uuid

  type           ModerationActionType
  targetType     String               @db.VarChar(20) // 'post', 'comment', 'message', 'member'
  targetID       String               @db.Uuid
  targetUser     String               @db.Uuid
  targetUserType String               @db.VarChar(20)

  // Target info (denormalized)
  targetInfo Json? @default("{}")

  // Moderator details
  moderatorID   String @db.Uuid
  moderatorName String @db.VarChar(255)
  moderatorType String @db.VarChar(20)

  reason   String @db.Text
  metadata Json?  @default("{}")

  // For temporary actions
  expiresAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  community      Community       @relation(fields: [communityID], references: [id], onDelete: Cascade)
  flaggedContent FlaggedContent? @relation(fields: [flaggedContentID], references: [id], onDelete: SetNull)

  @@index([communityID])
  @@index([type])
  @@index([targetType])
  @@index([targetID])
  @@index([moderatorID, moderatorType])
  @@index([createdAt])
  @@map("moderation_actions")
}

model ModerationRule {
  id          String @id @default(uuid()) @db.Uuid
  communityID String @db.Uuid

  name        String @db.VarChar(255)
  description String @db.Text
  type        String @db.VarChar(50) // 'keyword', 'ai', 'pattern', 'user_reports'

  conditions Json @default("{}")
  actions    Json @default("{}")

  isEnabled Boolean @default(true)

  // Usage statistics
  triggerCount  Int       @default(0)
  lastTriggered DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  community Community @relation(fields: [communityID], references: [id], onDelete: Cascade)

  @@index([communityID])
  @@index([isEnabled])
  @@index([type])
  @@map("moderation_rules")
}

model ModerationStats {
  id          String   @id @default(uuid()) @db.Uuid
  communityID String   @db.Uuid
  date        DateTime @db.Date

  // Content stats
  totalPosts      Int @default(0)
  totalComments   Int @default(0)
  flaggedPosts    Int @default(0)
  flaggedComments Int @default(0)

  // Action stats
  contentApproved  Int @default(0)
  contentRemoved   Int @default(0)
  contentDismissed Int @default(0)

  // Member stats
  membersWarned    Int @default(0)
  membersSuspended Int @default(0)
  membersBanned    Int @default(0)

  // AI stats
  aiScanned      Int @default(0)
  aiAutoResolved Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  community Community @relation(fields: [communityID], references: [id], onDelete: Cascade)

  @@unique([communityID, date])
  @@index([date])
  @@map("moderation_stats")
}

model CommunityAnalytics {
  id             String   @id @default(uuid()) @db.Uuid
  communityID    String   @db.Uuid
  date           DateTime @db.Date
  newMembers     Int      @default(0)
  totalMembers   Int      @default(0)
  newPosts       Int      @default(0)
  totalPosts     Int      @default(0)
  newComments    Int      @default(0)
  totalComments  Int      @default(0)
  newReactions   Int      @default(0)
  totalReactions Int      @default(0)
  activeUsers    Int      @default(0)
  engagementRate Float    @default(0)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)

  @@unique([communityID, date])
  @@index([date])
  @@map("community_analytics")
}

// Social Content Domain

model ContentCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  contentPieces ContentPiece[]

  @@unique([name])
  @@map("content_categories")
}

model ContentPiece {
  id                    String          @id @default(uuid()) @db.Uuid
  coachID               String          @db.Uuid
  categoryID            String          @db.Uuid
  title                 String          @db.VarChar(500)
  contentType           String          @db.VarChar(50)
  platform              String?         @db.VarChar(50)
  platformID            String?         @db.VarChar(255)
  url                   String?
  description           String?
  tags                  String[]
  thumbnailUrl          String?
  durationSeconds       Int?
  views                 Int?            @default(0)
  likes                 Int?            @default(0)
  comments              Int?            @default(0)
  shares                Int?            @default(0)
  engagementRate        Decimal?        @default(0.00) @db.Decimal(5, 2)
  aiAnalyzed            Boolean?        @default(false)
  performancePrediction Decimal?        @db.Decimal(3, 2)
  topicCategories       String[]
  suggestedImprovements Json?           @default("[]")
  status                String?         @default("draft") @db.VarChar(50)
  publishedAt           DateTime?       @db.Timestamptz(6)
  createdAt             DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?       @default(now()) @db.Timestamptz(6)
  category              ContentCategory @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  coach                 Coach           @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([coachID], map: "idx_content_pieces_coach_id")
  @@index([contentType], map: "idx_content_pieces_content_type")
  @@index([publishedAt], map: "idx_content_pieces_published_at")
  @@map("content_pieces")
}

model ContentSuggestion {
  id              String    @id @default(uuid()) @db.Uuid
  coachID         String    @db.Uuid
  title           String    @db.VarChar(500)
  contentType     String    @db.VarChar(50)
  platform        String?   @db.VarChar(50)
  description     String?
  reasoning       String?
  promptUsed      String?
  confidenceScore Decimal?  @db.Decimal(3, 2)
  trendData       Json?     @default("{}")
  status          String?   @default("pending") @db.VarChar(50)
  feedback        String?
  createdAt       DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @db.Timestamptz(6)
  coach           Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("content_suggestions")
}

// Email Domain

enum EmailCategory {
  thread_reply
  sequence_email
  transactional
  notification
}

enum EmailStatus {
  pending
  scheduled
  processing
  sent
  delivered
  opened
  clicked
  failed
  bounced
  simulated
  paused
  cancelled
}

enum SequenceStatus {
  active
  paused
  completed
  cancelled
}

enum TemplateCategory {
  client_response
  lead_followup
  billing
  custom
  auth
  system
  notification
  transactional
}

enum TemplateType {
  user
  system
}

enum EmailAccountProviders {
  gmail
  outlook
}

enum EmailThreadPriority {
  high
  normal
  low
}

enum EmailThreadStatus {
  active
  archived
}

enum EmailParticipantType {
  coach
  client
  lead
}

model EmailAccount {
  id             String                @id @default(uuid()) @db.Uuid
  userID         String                @db.Uuid
  userType       UserType
  emailAddress   String                @db.VarChar(255)
  provider       EmailAccountProviders
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?             @db.Timestamptz(6)
  isPrimary      Boolean               @default(false)
  isActive       Boolean               @default(true)
  syncEnabled    Boolean               @default(true)
  lastSyncAt     DateTime?             @db.Timestamptz(6)
  createdAt      DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime              @updatedAt @db.Timestamptz(6)

  emailThreads EmailThread[]

  @@unique([userID, userType, emailAddress])
  @@index([userID, userType])
  @@map("email_accounts")
}

model EmailMessage {
  id                       String  @id @default(uuid()) @db.Uuid
  emailThreadID            String? @db.Uuid
  emailTemplateID          String? @db.Uuid
  emailSequenceID          String? @db.Uuid
  deliverabilityAnalysisID String? @db.Uuid

  userID   String   @db.Uuid
  userType UserType

  to      String  @db.VarChar(255)
  from    String  @db.VarChar(255)
  cc      String?
  bcc     String?
  subject String? @db.VarChar(500)
  text    String?
  html    String?

  scheduledFor DateTime?   @db.Timestamptz(6)
  sentAt       DateTime?   @db.Timestamptz(6)
  deliveredAt  DateTime?   @db.Timestamptz(6)
  status       EmailStatus @default(scheduled)

  providerMessageID String? @unique @db.VarChar(255)
  emailProvider     String? @db.VarChar(50)

  openedAt  DateTime? @db.Timestamptz(6)
  clickedAt DateTime? @db.Timestamptz(6)

  attachments  Json?   @default("[]")
  metadata     Json?   @default("{}")
  errorMessage String?
  retryCount   Int     @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  emailThread            EmailThread?            @relation(fields: [emailThreadID], references: [id])
  emailTemplate          EmailTemplate?          @relation(fields: [emailTemplateID], references: [id])
  emailSequence          EmailSequence?          @relation(fields: [emailSequenceID], references: [id])
  deliverabilityAnalysis DeliverabilityAnalysis?

  @@index([userID, userType])
  @@index([status, scheduledFor])
  @@index([emailThreadID])
  @@map("email_messages")
}

model EmailTemplate {
  id String @id @default(uuid()) @db.Uuid

  userID   String?   @db.Uuid
  userType UserType?

  templateType TemplateType @default(user)

  name     String           @db.VarChar(255)
  category TemplateCategory

  subjectTemplate String? @db.VarChar(500)
  bodyTemplate    String

  systemKey String? @unique @db.VarChar(100)

  isAiGenerated    Boolean? @default(false)
  generationPrompt String?

  usageCount Int?      @default(0)
  lastUsedAt DateTime? @db.Timestamptz(6)

  isActive  Boolean? @default(true)
  isDefault Boolean? @default(false)

  description String?  @db.VarChar(500)
  variables   String[] @default([])

  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)

  emailMessages EmailMessage[]

  @@index([templateType, category])
  @@index([userID, userType, category])
  @@index([systemKey])
  @@map("email_templates")
}

model EmailThread {
  id             String   @id @default(uuid()) @db.Uuid
  userID         String   @db.Uuid
  userType       UserType
  emailAccountID String   @db.Uuid

  participantID   String?               @db.Uuid
  participantType EmailParticipantType?

  threadID String @db.VarChar(255)

  subject      String?  @db.VarChar(500)
  participants String[]
  messageCount Int      @default(0)

  status   EmailThreadStatus   @default(active)
  isRead   Boolean             @default(false)
  priority EmailThreadPriority @default(normal)

  s3Bucket    String? @db.VarChar(100)
  s3KeyPrefix String? @db.VarChar(500)

  lastMessageAt DateTime? @db.Timestamptz(6)
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)

  sentMessages       EmailMessage[]
  generatedResponses GeneratedEmailResponse[]

  emailAccount EmailAccount @relation(fields: [emailAccountID], references: [id])

  @@index([userID, userType])
  @@index([emailAccountID])
  @@index([lastMessageAt])
  @@map("email_threads")
}

model GeneratedEmailResponse {
  id       String @id @default(uuid()) @db.Uuid
  threadID String @db.Uuid

  subject String @db.VarChar(500)
  body    String @db.Text

  actualSubject String? @db.VarChar(500)
  actualBody    String? @db.Text

  confidence Decimal?             @default(0.8) @db.Decimal(3, 2)
  status     GeneratedEmailStatus @default(generated)

  sentAt       DateTime? @db.Timestamptz(6)
  scheduledFor DateTime? @db.Timestamptz(6)
  metadata     Json?     @default("{}")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  emailThread EmailThread @relation(fields: [threadID], references: [id], onDelete: Cascade)

  @@index([threadID])
  @@index([status])
  @@map("generated_email_responses")
}

model DeliverabilityAnalysis {
  id             String @id @default(uuid()) @db.Uuid
  emailMessageID String @unique @db.Uuid

  overallScore            Int?
  primaryInboxProbability Int?
  spamTriggers            Json? @default("[]")
  recommendations         Json? @default("[]")
  improvements            Json? @default("[]")

  status      String    @default("processing") @db.VarChar(20)
  completedAt DateTime? @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)

  emailMessage EmailMessage @relation(fields: [emailMessageID], references: [id], onDelete: Cascade)

  @@index([emailMessageID])
  @@map("deliverability_analyses")
}

model EmailSequence {
  id       String   @id @default(uuid()) @db.Uuid
  userID   String   @db.VarChar(50)
  userType UserType

  targetID   String?               @db.Uuid
  targetType EmailParticipantType?

  name        String   @db.VarChar(255)
  status      String   @db.VarChar(50)
  sequence    Json     @default("[]")
  description String?
  triggerType String   @db.VarChar(50)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  emailMessages EmailMessage[]

  @@map("email_sequences")
}

// Event Domain

enum EventOutboxStatus {
  pending
  published
  failed
  moved_to_dlq
}

enum DLQStatus {
  pending_review
  reviewed
  requeued
  discarded
}

model EventOutbox {
  id           String            @id @default(uuid()) @db.Uuid
  eventID      String            @unique @db.Uuid
  eventType    String            @db.VarChar(100)
  routingKey   String            @db.VarChar(100)
  payload      String
  status       EventOutboxStatus @default(pending)
  retryCount   Int               @default(0)
  maxRetries   Int               @default(3)
  lastError    String?
  publishedAt  DateTime?         @db.Timestamptz(6)
  scheduledFor DateTime?         @db.Timestamptz(6)
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt @db.Timestamptz(6)

  @@index([status, scheduledFor])
  @@index([eventType])
  @@index([createdAt])
  @@map("event_outbox")
}

model DeadLetterQueue {
  id                String    @id @default(uuid()) @db.Uuid
  originalEventID   String    @unique @db.Uuid
  eventType         String    @db.VarChar(100)
  routingKey        String    @db.VarChar(100)
  payload           String
  failureReason     String
  retryCount        Int
  status            DLQStatus @default(pending_review)
  reviewNotes       String?
  originalCreatedAt DateTime  @db.Timestamptz(6)
  movedToDLQAt      DateTime  @default(now()) @db.Timestamptz(6)
  reviewedAt        DateTime? @db.Timestamptz(6)
  reviewedBy        String?   @db.VarChar(100)
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)

  @@index([status])
  @@index([eventType])
  @@index([movedToDLQAt])
  @@index([originalCreatedAt])
  @@map("dead_letter_queue")
}

// Integration Domain

enum IntegrationType {
  social
  app
}

model Integration {
  id String @id @default(uuid()) @db.Uuid

  userID          String          @db.Uuid
  userType        UserType
  integrationType IntegrationType
  platformName    String          @db.VarChar(100)
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?       @db.Timestamptz(6)
  apiKey          String?
  webhookSecret   String?         @db.VarChar(255)
  config          Json?           @default("{}")
  syncSettings    Json?           @default("{}")
  isActive        Boolean?        @default(true)
  lastSyncAt      DateTime?       @db.Timestamptz(6)
  syncError       String?
  createdAt       DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?       @default(now()) @db.Timestamptz(6)

  webhookEvents WebhookEvent[]

  @@index([userID, userType], map: "idx_integrations_user")
  @@index([platformName], map: "idx_integrations_platform")
  @@map("integrations")
}

model WebhookEvent {
  id             String       @id @default(uuid()) @db.Uuid
  integrationID  String?      @db.Uuid
  eventType      String       @db.VarChar(100)
  eventData      Json
  sourcePlatform String       @db.VarChar(100)
  status         String?      @default("pending") @db.VarChar(50)
  processedAt    DateTime?    @db.Timestamptz(6)
  errorMessage   String?
  retryCount     Int?         @default(0)
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  integration    Integration? @relation(fields: [integrationID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([integrationID], map: "idx_webhook_events_integration_id")
  @@index([status], map: "idx_webhook_events_status")
  @@map("webhook_events")
}

// Media Domain

enum MediaProvider {
  cloudinary
  vimeo
  cloudfront
  S3
}

enum MediaResourceType {
  image
  video
  raw
}

model MediaFile {
  id           String            @id @default(uuid()) @db.Uuid
  userID       String            @db.Uuid
  publicID     String            @unique @db.VarChar(255)
  originalName String            @db.VarChar(500)
  url          String            @db.Text
  secureUrl    String            @db.Text
  format       String            @db.VarChar(20)
  resourceType MediaResourceType
  fileSize     BigInt
  width        Int?
  height       Int?
  duration     Int? // in seconds for videos
  folder       String?           @db.VarChar(255)
  tags         String[]
  metadata     Json              @default("{}")
  provider     MediaProvider
  providerData Json              @default("{}")
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt @db.Timestamptz(6)

  mediaAnalytics MediaAnalytics[]

  @@index([userID])
  @@index([resourceType])
  @@index([folder])
  @@index([tags])
  @@index([createdAt])
  @@map("media_files")
}

model MediaAnalytics {
  id              String   @id @default(uuid()) @db.Uuid
  mediaFileID     String   @db.Uuid
  date            DateTime @db.Date
  views           Int      @default(0)
  downloads       Int      @default(0)
  transformations Int      @default(0)
  bandwidthBytes  BigInt   @default(0)
  uniqueViewers   Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  mediaFile MediaFile @relation(fields: [mediaFileID], references: [id], onDelete: Cascade)

  @@unique([mediaFileID, date])
  @@index([date])
  @@map("media_analytics")
}

model MediaTransformation {
  id           String    @id @default(uuid()) @db.Uuid
  mediaFileID  String    @db.Uuid
  userID       String    @db.Uuid
  requestedBy  String    @db.Uuid
  requestURL   String    @db.Text
  parameters   Json
  resultURL    String?   @db.Text
  status       String    @default("pending") @db.VarChar(20)
  errorMessage String?   @db.Text
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  completedAt  DateTime? @db.Timestamptz(6)

  @@index([mediaFileID])
  @@index([userID])
  @@index([status])
  @@index([createdAt])
  @@map("media_transformations")
}

// Notification Domain

model Notification {
  id String @id @default(uuid()) @db.Uuid

  userID   String?   @db.Uuid
  userType UserType?

  type      String    @db.VarChar(50)
  title     String    @db.VarChar(255)
  message   String
  actionUrl String?
  isRead    Boolean?  @default(false)
  readAt    DateTime? @db.Timestamptz(6)
  priority  String?   @default("normal") @db.VarChar(20)
  metadata  Json?     @default("{}")
  createdAt DateTime? @default(now()) @db.Timestamptz(6)

  @@index([userID, userType], map: "idx_notifications_user")
  @@index([isRead], map: "idx_notifications_is_read")
  @@map("notifications")
}

model NotificationPreference {
  id           String   @id @default(uuid()) @db.Uuid
  userID       String   @db.Uuid
  userType     UserType
  emailEnabled Boolean  @default(true)
  pushEnabled  Boolean  @default(true)
  webhookUrl   String?  @db.VarChar(500)
  preferences  Json     @default("{}")
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userID, userType])
  @@index([userID])
  @@map("notification_preferences")
}

model NotificationDelivery {
  id             String    @id @default(uuid()) @db.Uuid
  notificationID String    @db.Uuid
  channel        String    @db.VarChar(50) // 'email', 'push', 'webhook'
  status         String    @default("pending") @db.VarChar(20) // 'pending', 'sent', 'delivered', 'failed'
  messageID      String?   @db.VarChar(255) // External provider message ID
  error          String?
  retryCount     Int       @default(0)
  deliveredAt    DateTime? @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @db.Timestamptz(6)

  @@index([notificationID])
  @@index([status])
  @@index([channel])
  @@map("notification_deliveries")
}

// Message Domain

enum MessageType {
  text
  image
  video
  file
  system
}

model Conversation {
  id               String    @id @default(uuid()) @db.Uuid
  type             String    @db.VarChar(20)
  name             String?   @db.VarChar(255)
  participantIDs   String[]
  participantTypes String[]
  lastMessageID    String?   @db.Uuid
  lastMessageAt    DateTime? @db.Timestamptz(6)
  unreadCount      Json      @default("{}")
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(6)

  messages DirectMessage[]

  @@index([participantIDs])
  @@index([lastMessageAt])
  @@index([isActive])
  @@map("conversations")
}

model DirectMessage {
  id               String      @id @default(uuid()) @db.Uuid
  conversationID   String      @db.Uuid
  senderID         String      @db.Uuid
  senderType       String      @db.VarChar(20) // 'coach', 'admin', 'client'
  senderName       String      @db.VarChar(255) // Denormalized for performance
  senderAvatarUrl  String?     @db.Text // Denormalized for performance
  type             MessageType @default(text)
  content          String      @db.Text
  mediaUrls        String[]    @default([])
  fileUrl          String?     @db.Text
  fileName         String?     @db.VarChar(255)
  fileSize         Int?
  isRead           Boolean     @default(false)
  readAt           DateTime?   @db.Timestamptz(6)
  isEdited         Boolean     @default(false)
  editedAt         DateTime?   @db.Timestamptz(6)
  replyToMessageID String?     @db.Uuid
  metadata         Json?       @default("{}")
  createdAt        DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime    @updatedAt @db.Timestamptz(6)

  conversation   Conversation    @relation(fields: [conversationID], references: [id], onDelete: Cascade)
  replyToMessage DirectMessage?  @relation("MessageReplies", fields: [replyToMessageID], references: [id])
  replies        DirectMessage[] @relation("MessageReplies")

  @@index([conversationID])
  @@index([senderID, senderType])
  @@index([senderName])
  @@index([isRead])
  @@index([createdAt])
  @@index([replyToMessageID])
  @@map("messages")
}

model MessageDelivery {
  id        String   @id @default(uuid()) @db.Uuid
  messageID String   @db.Uuid
  userID    String   @db.Uuid
  userType  UserType
  status    String   @default("sent") @db.VarChar(20) // 'sent', 'delivered', 'read'
  timestamp DateTime @default(now()) @db.Timestamptz(6)

  @@unique([messageID, userID, userType])
  @@index([userID, userType])
  @@index([status])
  @@map("message_deliveries")
}

model ConversationParticipant {
  id             String    @id @default(uuid()) @db.Uuid
  conversationID String    @db.Uuid
  userID         String    @db.Uuid
  userType       UserType
  joinedAt       DateTime  @default(now()) @db.Timestamptz(6)
  leftAt         DateTime? @db.Timestamptz(6)
  isActive       Boolean   @default(true)
  role           String    @default("member") @db.VarChar(20) // 'admin', 'member'

  @@unique([conversationID, userID, userType])
  @@index([userID, userType])
  @@index([conversationID])
  @@index([isActive])
  @@map("conversation_participants")
}

// Lead Domain

enum LeadType {
  coach_lead
  admin_lead
}

enum LeadStatus {
  contacted
  scheduled
  converted
  unresponsive
}

model Lead {
  id              String     @id @default(uuid()) @db.Uuid
  coachID         String?    @db.Uuid
  leadType        LeadType   @default(coach_lead)
  name            String     @db.VarChar(100)
  email           String     @db.VarChar(255)
  phone           String?    @db.VarChar(20)
  source          String?    @db.VarChar(100)
  status          LeadStatus @default(contacted)
  meetingDate     DateTime?  @db.Timestamptz(6)
  meetingTime     String?    @db.VarChar(20)
  notes           String?
  answers         Json?
  qualified       Boolean?   @default(false)
  marketingOptIn  Boolean    @default(false)
  submittedAt     DateTime?  @db.Timestamptz(6)
  lastContactedAt DateTime?  @db.Timestamptz(6)
  convertedAt     DateTime?  @db.Timestamptz(6)
  createdAt       DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime   @updatedAt @db.Timestamptz(6)
  coach           Coach?     @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@map("leads")
}

// Billing Domain

enum TransactionStatus {
  pending
  processing
  completed
  failed
  canceled
  refunded
  partially_refunded
}

enum PaymentMethodType {
  credit_card
  debit_card
  paypal
  bank_transfer
  stripe
  manual
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  canceled
  refunded
}

enum SubscriptionStatus {
  active
  canceled
  expired
  past_due
  trialing
  incomplete
  incomplete_expired
  unpaid
}

enum BillingCycle {
  monthly
  annual
}

enum PricingType {
  one_time
  recurring
  installment
}

enum PaymentRequestStatus {
  pending
  paid
  expired
  canceled
}

enum PaymentRequestType {
  plan_payment
  course_payment
  community_payment
  custom_payment
}

model PaymentMethod {
  id String @id @default(uuid()) @db.Uuid

  coachID   String?           @db.Uuid
  clientID  String?           @db.Uuid
  type      PaymentMethodType
  isDefault Boolean           @default(false)
  isActive  Boolean           @default(true)

  cardLast4    String?
  cardBrand    String?
  cardExpMonth Int?
  cardExpYear  Int?

  stripePaymentMethodID String?
  paypalEmail           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coach        Coach?        @relation(fields: [coachID], references: [id], onDelete: Cascade)
  client       Client?       @relation(fields: [clientID], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("payment_methods")
}

model Transaction {
  id String @id @default(uuid()) @db.Uuid

  payerID   String @db.Uuid
  payerType String @db.VarChar(20)

  payeeID   String? @db.Uuid
  payeeType String? @db.VarChar(20)

  planID           String? @db.Uuid
  courseID         String? @db.Uuid
  communityID      String? @db.Uuid
  subscriptionID   String? @db.Uuid
  paymentRequestID String? @db.Uuid

  paymentMethodID   String?           @db.Uuid
  amount            Int
  currency          String            @default("USD")
  status            TransactionStatus @default(pending)
  paymentMethodType PaymentMethodType @default(stripe)

  stripePaymentID String?
  paypalOrderID   String?

  invoiceID     String?   @db.Uuid
  invoiceNumber String?   @unique
  invoiceDate   DateTime
  dueDate       DateTime?
  paidAt        DateTime?

  description    String?
  metadata       Json?
  failureReason  String?
  refundReason   String?
  refundedAmount Int?

  platformFeeAmount Int?   @default(0)
  platformFeeRate   Float? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription   Subscription?   @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)
  plan           Plan?           @relation(fields: [planID], references: [id], onDelete: Restrict)
  course         Course?         @relation(fields: [courseID], references: [id], onDelete: Restrict)
  community      Community?      @relation(fields: [communityID], references: [id], onDelete: Restrict)
  paymentMethod  PaymentMethod?  @relation(fields: [paymentMethodID], references: [id], onDelete: SetNull)
  paymentRequest PaymentRequest? @relation(fields: [paymentRequestID], references: [id], onDelete: SetNull)
  invoice        Invoice?        @relation(fields: [invoiceID], references: [id], onDelete: SetNull)

  @@index([payerID, payerType])
  @@index([payeeID, payeeType])
  @@index([status])
  @@index([paymentMethodID])
  @@map("transactions")
}

model Subscription {
  id String @id @default(uuid()) @db.Uuid

  subscriberID   String @db.Uuid
  subscriberType String @db.VarChar(20)

  planID      String? @db.Uuid
  communityID String? @db.Uuid
  courseID    String? @db.Uuid

  status       SubscriptionStatus @default(active)
  billingCycle BillingCycle       @default(monthly)

  amount   Int
  currency String @default("USD")

  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  nextBillingDate    DateTime?

  canceledAt   DateTime?
  cancelReason String?

  trialStart DateTime?
  trialEnd   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan         Plan?         @relation(fields: [planID], references: [id], onDelete: Restrict)
  community    Community?    @relation(fields: [communityID], references: [id], onDelete: Restrict)
  course       Course?       @relation(fields: [courseID], references: [id], onDelete: Restrict)
  transactions Transaction[]
  invoices     Invoice[]

  @@index([subscriberID, subscriberType])
  @@index([status])
  @@map("subscriptions")
}

model Invoice {
  id String @id @default(uuid()) @db.Uuid

  customerID   String @db.Uuid
  customerType String @db.VarChar(20)

  subscriptionID String?       @db.Uuid
  invoiceNumber  String        @unique
  amount         Int
  currency       String        @default("USD")
  status         InvoiceStatus @default(draft)
  issueDate      DateTime      @default(now())
  dueDate        DateTime
  paidAt         DateTime?
  lineItems      Json
  subtotal       Int
  taxRate        Float?
  taxAmount      Int?
  discountAmount Int?
  total          Int
  notes          String?
  metadata       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription? @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)
  transactions Transaction[]

  @@index([customerID, customerType])
  @@index([status])
  @@map("invoices")
}

model PaymentRequest {
  id String @id @default(uuid()) @db.Uuid

  createdByID   String @db.Uuid
  createdByType String @db.VarChar(20)

  payerID   String @db.Uuid
  payerType String @db.VarChar(20)

  type PaymentRequestType

  planID      String? @db.Uuid
  courseID    String? @db.Uuid
  communityID String? @db.Uuid

  amount      Int
  currency    String  @default("USD")
  description String?
  notes       String?

  stripePaymentLinkID String? @unique
  paymentLinkUrl      String?

  status PaymentRequestStatus @default(pending)

  paidAt     DateTime?
  paidAmount Int?

  expiresAt DateTime?

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan         Plan?         @relation(fields: [planID], references: [id], onDelete: Restrict)
  course       Course?       @relation(fields: [courseID], references: [id], onDelete: Restrict)
  community    Community?    @relation(fields: [communityID], references: [id], onDelete: Restrict)
  transactions Transaction[]

  @@index([payerID, payerType])
  @@index([createdByID, createdByType])
  @@index([status])
  @@map("payment_requests")
}

model Plan {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @unique
  description  String?
  monthlyPrice Int
  annualPrice  Int
  color        String?   @default("#7B21BA") @db.VarChar(50)
  maxClients   Int?
  maxAiAgents  Int?
  features     Json?
  isActive     Boolean   @default(true)
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime? @db.Timestamptz(6)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  subscriptions   Subscription[]
  transactions    Transaction[]
  paymentRequests PaymentRequest[]
  planAiAgents    PlanAiAgent[]

  @@map("plans")
}

model PlanAiAgent {
  id       String  @id @default(uuid()) @db.Uuid
  planID   String  @db.Uuid
  agentID  String  @db.Uuid
  isActive Boolean @default(true)

  plan    Plan    @relation(fields: [planID], references: [id], onDelete: Cascade)
  aiAgent AiAgent @relation(fields: [agentID], references: [id], onDelete: Cascade)

  @@unique([planID, agentID])
  @@index([planID])
  @@index([agentID])
  @@map("plan_ai_agents")
}

// Course Domain
enum LessonDripType {
  course_start
  previous_lesson
}

model Course {
  id              String  @id @default(uuid()) @db.Uuid
  coachID         String  @db.Uuid
  title           String  @db.VarChar(255)
  description     String?
  category        String? @db.VarChar(100)
  difficultyLevel String? @db.VarChar(50)

  pricingType PricingType @default(one_time)
  price       Int?
  currency    String      @default("USD")

  installmentCount    Int?
  installmentAmount   Int?
  installmentInterval String? @db.VarChar(20)

  monthlyPrice Int?
  annualPrice  Int?

  thumbnailUrl           String?
  estimatedDurationHours Int?
  totalChapters          Int?    @default(0)
  totalLessons           Int?    @default(0)

  totalEnrollments  Int?     @default(0)
  activeEnrollments Int?     @default(0)
  completionRate    Decimal? @default(0.00) @db.Decimal(5, 2)

  isActive           Boolean @default(true)
  isPublished        Boolean @default(false)
  allowInstallments  Boolean @default(false)
  allowSubscriptions Boolean @default(false)

  isDripEnabled Boolean @default(false)
  dripInterval  String? @db.VarChar(20)
  dripCount     Int?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  coach           Coach              @relation(fields: [coachID], references: [id], onDelete: Cascade)
  chapters        CourseChapter[]
  enrollments     CourseEnrollment[]
  subscriptions   Subscription[]
  transactions    Transaction[]
  paymentRequests PaymentRequest[]

  @@index([coachID])
  @@index([isActive, isPublished])
  @@index([pricingType])
  @@map("courses")
}

model CourseChapter {
  id          String  @id @default(uuid()) @db.Uuid
  courseID    String  @db.Uuid
  title       String  @db.VarChar(255)
  description String?
  orderIndex  Int

  dripDelay Int?    @default(0)
  isLocked  Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  course  Course         @relation(fields: [courseID], references: [id], onDelete: Cascade)
  lessons CourseLesson[]

  @@unique([courseID, orderIndex])
  @@index([courseID])
  @@map("course_chapters")
}

model CourseLesson {
  id          String  @id @default(uuid()) @db.Uuid
  chapterID   String  @db.Uuid
  title       String  @db.VarChar(255)
  description String?
  orderIndex  Int

  lessonType    String  @db.VarChar(20)
  content       String? @db.Text
  videoUrl      String?
  videoDuration Int?
  pdfUrl        String?

  dripDelay Int?            @default(0)
  dripType  LessonDripType?
  isLocked  Boolean         @default(false)

  estimatedMinutes Int? @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  chapter  CourseChapter    @relation(fields: [chapterID], references: [id], onDelete: Cascade)
  progress LessonProgress[]

  @@unique([chapterID, orderIndex])
  @@index([chapterID])
  @@map("course_lessons")
}

model CourseEnrollment {
  id       String @id @default(uuid()) @db.Uuid
  courseID String @db.Uuid
  clientID String @db.Uuid

  paymentType      PricingType
  totalPaid        Int         @default(0)
  remainingBalance Int         @default(0)
  nextPaymentDue   DateTime?

  enrolledAt  DateTime  @default(now()) @db.Timestamptz(6)
  startedAt   DateTime? @db.Timestamptz(6)
  completedAt DateTime? @db.Timestamptz(6)

  progressPercentage Decimal @default(0.00) @db.Decimal(5, 2)
  currentChapterID   String? @db.Uuid
  currentLessonID    String? @db.Uuid
  chaptersCompleted  Int     @default(0)
  lessonsCompleted   Int     @default(0)

  lastActivityAt        DateTime? @db.Timestamptz(6)
  totalTimeSpentMinutes Int       @default(0)
  loginCount            Int       @default(0)

  status           String  @default("active") @db.VarChar(50)
  dropoutRiskScore Decimal @default(0.00) @db.Decimal(3, 2)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  client         Client           @relation(fields: [clientID], references: [id], onDelete: Cascade)
  course         Course           @relation(fields: [courseID], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]

  @@unique([courseID, clientID])
  @@index([clientID])
  @@index([courseID])
  @@index([status])
  @@index([nextPaymentDue])
  @@map("course_enrollments")
}

model LessonProgress {
  id           String @id @default(uuid()) @db.Uuid
  enrollmentID String @db.Uuid
  lessonID     String @db.Uuid

  isCompleted        Boolean   @default(false)
  completedAt        DateTime? @db.Timestamptz(6)
  timeSpentMinutes   Int       @default(0)
  progressPercentage Decimal   @default(0.00) @db.Decimal(5, 2)

  videoWatchedSeconds  Int? @default(0)
  videoDurationSeconds Int?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  enrollment CourseEnrollment @relation(fields: [enrollmentID], references: [id], onDelete: Cascade)
  lesson     CourseLesson     @relation(fields: [lessonID], references: [id], onDelete: Cascade)

  @@unique([enrollmentID, lessonID])
  @@index([lessonID])
  @@map("lesson_progress")
}

// Platform

model PlatformAnalytic {
  id                      String    @id @default(uuid()) @db.Uuid
  date                    DateTime  @unique @db.Date
  totalCoaches            Int?      @default(0)
  activeCoaches           Int?      @default(0)
  newCoaches              Int?      @default(0)
  churnedCoaches          Int?      @default(0)
  totalRevenue            Decimal?  @default(0.00) @db.Decimal(12, 2)
  monthlyRecurringRevenue Decimal?  @default(0.00) @db.Decimal(12, 2)
  churnRate               Decimal?  @default(0.00) @db.Decimal(5, 2)
  totalAiRequests         Int?      @default(0)
  totalAiTokens           Int?      @default(0)
  totalEmailsProcessed    Int?      @default(0)
  avgResponseTimeMs       Int?      @default(0)
  uptimePercentage        Decimal?  @default(100.00) @db.Decimal(5, 2)
  createdAt               DateTime? @default(now()) @db.Timestamptz(6)

  @@index([date], map: "idx_platform_analytics_date")
  @@map("platform_analytics")
}

model ActivityLog {
  id         String   @id @default(uuid()) @db.Uuid
  userID     String   @db.Uuid
  userType   UserType
  action     String   @db.VarChar(100)
  entityType String?  @db.VarChar(50)
  entityID   String?  @db.Uuid
  metadata   Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  @@index([userID, userType])
  @@index([createdAt])
  @@map("activity_logs")
}
